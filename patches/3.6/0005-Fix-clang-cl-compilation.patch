unchanged:
--- a/Modules/_tracemalloc.c	2018-10-20 07:24:09.000000000 +0200
+++ b/Modules/_tracemalloc.c	2020-07-07 09:53:17.494412115 +0200
@@ -61,23 +61,30 @@
 
 #define DEFAULT_DOMAIN 0
 
-/* Pack the frame_t structure to reduce the memory footprint. */
+/* Pack the pointer_t structure to reduce the memory footprint. */
+#if defined(_MSC_VER)
+#pragma pack(push, 4)
+#endif
 typedef struct
 #ifdef __GNUC__
 __attribute__((packed))
 #endif
 {
     uintptr_t ptr;
-    _PyTraceMalloc_domain_t domain;
+    unsigned int domain;
 } pointer_t;
+#ifdef _MSC_VER
+#pragma pack(pop)
+#endif
 
 /* Pack the frame_t structure to reduce the memory footprint on 64-bit
-   architectures: 12 bytes instead of 16. */
+architectures: 12 bytes instead of 16. */
+#if defined(_MSC_VER)
+#pragma pack(push, 4)
+#endif
 typedef struct
 #ifdef __GNUC__
 __attribute__((packed))
-#elif defined(_MSC_VER)
-#pragma pack(push, 4)
 #endif
 {
     /* filename cannot be NULL: "<unknown>" is used if the Python frame
unchanged:
--- a/Include/pytime.h	2018-10-20 07:24:09.000000000 +0200
+++ b/Include/pytime.h	2020-07-07 09:42:08.542412115 +0200
@@ -13,6 +13,12 @@
 extern "C" {
 #endif
 
+#if defined(_MSC_VER)
+	/* Forward declare struct timeval so that clang-cl doesn't complain about it
+	being a local declaration later on  in _PyTime_AsTimeval.*/
+	struct timeval;
+#endif /* _MSC_VER */
+
 /* _PyTime_t: Python timestamp with subsecond precision. It can be used to
    store a duration, and so indirectly a date (related to another date, like
    UNIX epoch). */
only in patch2:
unchanged:
--- a/PC/pyconfig.h	2020-07-07 09:19:48.451970764 +0200
+++ b/PC/pyconfig.h	2020-07-07 09:21:19.419970764 +0200
@@ -94,15 +94,9 @@
 /* e.g., this produces, after compile-time string catenation,
  * 	("[MSC v.1200 32 bit (Intel)]")
  *
- * _Py_STRINGIZE(_MSC_VER) expands to
- * _Py_STRINGIZE1((_MSC_VER)) expands to
- * _Py_STRINGIZE2(_MSC_VER) but as this call is the result of token-pasting
- *      it's scanned again for macros and so further expands to (under MSVC 6)
- * _Py_STRINGIZE2(1200) which then expands to
- * "1200"
+ * The double-stringize hack, a method to get the string version of _MSC_VER
  */
-#define _Py_STRINGIZE(X) _Py_STRINGIZE1((X))
-#define _Py_STRINGIZE1(X) _Py_STRINGIZE2 ## X
+#define _Py_STRINGIZE(X) _Py_STRINGIZE2(X)
 #define _Py_STRINGIZE2(X) #X
 
 /* MSVC defines _WINxx to differentiate the windows platform types
@@ -128,6 +122,8 @@
 #elif defined(_M_X64) || defined(_M_AMD64)
 #if defined(__INTEL_COMPILER)
 #define COMPILER ("[ICC v." _Py_STRINGIZE(__INTEL_COMPILER) " 64 bit (amd64) with MSC v." _Py_STRINGIZE(_MSC_VER) " CRT]")
+#elif defined(__clang__)
+#define COMPILER ("[clang v." _Py_STRINGIZE(__clang_version__) " 64 bit (amd64) with MSC v." _Py_STRINGIZE(_MSC_VER) " CRT]")
 #else
 #define COMPILER _Py_PASTE_VERSION("64 bit (AMD64)")
 #endif /* __INTEL_COMPILER */
@@ -179,6 +175,8 @@
 #if defined(_M_IX86)
 #if defined(__INTEL_COMPILER)
 #define COMPILER ("[ICC v." _Py_STRINGIZE(__INTEL_COMPILER) " 32 bit (Intel) with MSC v." _Py_STRINGIZE(_MSC_VER) " CRT]")
+#elif defined(__clang__)
+#define COMPILER ("[clang v." _Py_STRINGIZE(__clang_version__) " 32 bit (Intel) with MSC v." _Py_STRINGIZE(_MSC_VER) " CRT]")
 #else
 #define COMPILER _Py_PASTE_VERSION("32 bit (Intel)")
 #endif /* __INTEL_COMPILER */
